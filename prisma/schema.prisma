// Prisma Schema for thecareranchintake
// Database: PostgreSQL
// Generated: 2025-10-22

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // Used for migrations (direct connection)
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole         @default(PARTICIPANT)

  // Relations
  accounts        Account[]
  sessions        Session[]
  submissions     FormSubmission[]
  deadlines       UserDeadline[]
  invitations     Invitation[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum UserRole {
  ADMIN
  PARTICIPANT
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// QUESTIONNAIRE SYSTEM MODELS
// ============================================

// Form Structure (Dynamic Form Builder)
model Form {
  id              String            @id @default(cuid())
  title           String
  description     String?           @db.Text
  isActive        Boolean           @default(true)

  // Media
  backgroundImage String?
  backgroundVideo String?
  backgroundAudio String?

  // Relations
  pages           FormPage[]
  submissions     FormSubmission[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model FormPage {
  id              String       @id @default(cuid())
  formId          String
  form            Form         @relation(fields: [formId], references: [id], onDelete: Cascade)

  title           String
  description     String?      @db.Text
  order           Int

  // Page-specific media
  backgroundImage String?
  backgroundVideo String?
  audioFile       String?

  // Relations
  sections        FormSection[]

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([formId, order])
  @@index([formId])
}

model FormSection {
  id          String     @id @default(cuid())
  pageId      String
  page        FormPage   @relation(fields: [pageId], references: [id], onDelete: Cascade)

  title       String
  description String?    @db.Text
  order       Int

  // Relations
  questions   Question[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([pageId, order])
  @@index([pageId])
}

model Question {
  id                       String        @id @default(cuid())
  sectionId                String
  section                  FormSection   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  text                     String        @db.Text
  description              String?       @db.Text
  type                     QuestionType
  order                    Int
  required                 Boolean       @default(false)

  // Conditional Logic
  conditionalOnQuestionId  String?
  conditionalOnQuestion    Question?     @relation("ConditionalQuestions", fields: [conditionalOnQuestionId], references: [id], onDelete: SetNull)
  conditionalQuestions     Question[]    @relation("ConditionalQuestions")
  conditionalValue         String?       // Value that triggers display

  // Options (for multiple choice, dropdown, etc.)
  options                  Json?         // ["Option 1", "Option 2"]

  // Validation
  validationRules          Json?         // { min: 0, max: 100, pattern: "..." }

  // Relations
  responses                Response[]

  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@unique([sectionId, order])
  @@index([sectionId])
  @@index([conditionalOnQuestionId])
}

enum QuestionType {
  SHORT_TEXT
  LONG_TEXT
  EMAIL
  PHONE
  NUMBER
  DATE
  TIME
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  DROPDOWN
  RATING
  SCALE
  YES_NO
  FILE_UPLOAD
}

// Form Submissions & Responses
model FormSubmission {
  id            String            @id @default(cuid())
  formId        String
  form          Form              @relation(fields: [formId], references: [id], onDelete: Cascade)
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  status        SubmissionStatus  @default(IN_PROGRESS)
  currentPageId String?

  // Auto-save tracking
  lastSavedAt   DateTime?

  // Submission tracking
  submittedAt   DateTime?

  // Relations
  responses     Response[]
  deadline      UserDeadline?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([formId, userId])
  @@index([userId])
  @@index([formId])
  @@index([status])
}

enum SubmissionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SUBMITTED
}

model Response {
  id              String          @id @default(cuid())
  submissionId    String
  submission      FormSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  questionId      String
  question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Flexible response storage
  textValue       String?         @db.Text
  numberValue     Float?
  dateValue       DateTime?
  booleanValue    Boolean?
  jsonValue       Json?           // For arrays, objects
  fileUrl         String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([submissionId, questionId])
  @@index([submissionId])
  @@index([questionId])
}

// Deadline & Reminder Management
model UserDeadline {
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissionId    String          @unique
  submission      FormSubmission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  deadline        DateTime

  // Reminder tracking
  reminder7Days   Boolean         @default(false)
  reminder3Days   Boolean         @default(false)
  reminder1Day    Boolean         @default(false)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([deadline])
}

// User Invitation System
model Invitation {
  id            String          @id @default(cuid())
  email         String
  token         String          @unique @default(cuid())
  role          UserRole        @default(PARTICIPANT)
  userId        String?
  user          User?           @relation(fields: [userId], references: [id], onDelete: SetNull)

  deadline      DateTime?
  accepted      Boolean         @default(false)
  expiresAt     DateTime

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([email])
  @@index([token])
}

// Media Library
model MediaAsset {
  id              String      @id @default(cuid())
  name            String
  type            MediaType
  url             String
  thumbnailUrl    String?
  fileSize        Int?
  duration        Int?        // For audio/video in seconds

  uploadedById    String

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([type])
  @@index([uploadedById])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}
